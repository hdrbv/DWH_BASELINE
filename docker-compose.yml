version: "3.9"
services:
  postgres_master:
    container_name: postgres_master
    image: postgres:14.5
    restart: always
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./data-slave:/var/lib/postgresql/data-slave
      - ./createdb.sql:/docker-entrypoint-initdb.d/createdb.sql              
      - ./createview.sql:/docker-entrypoint-initdb.d/createview.sql      
      - ./init-script/config/postgres.conf:/etc/postgresql/postgresql.conf
      - ./init-script/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init-script:/etc/postgresql/init-script/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 50s  
  
  postgres_slave:
    container_name: postgres_slave
    image: postgres:14.5
    volumes:
      - ./data-slave:/var/lib/postgresql/data 
      - ./init-script/config/postgres.conf:/etc/postgresql/postgresql.conf
      - ./init-script/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  postgres_dwh:
    container_name: postgres_dwh
    image: postgres:14.5
    restart: always
    volumes:
      - ./data_pgre_ddwh:/var/lib/postgresql/data_pgre_ddwh      
      - ./create_pgre_ddwh.sql:/docker-entrypoint-initdb.d/create_pgre_ddwh.sql              
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres    
  
  clickh_master:
    container_name: clickh_master
    image: altinity/clickhouse-server:21.12.3.32.altinitydev.arm
    restart: always
    volumes:
      - ./data_ddwh:/var/lib/clickhouse/data_ddwh
      - ./create_ddwh.sql:/docker-entrypoint-initdb.d/create_ddwh.sql              
    ports:
      - "8123:8123"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    platform: linux/x86_64                                
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    platform: linux/x86_64                                
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    ports:
      - 29092:29092
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  debezium:
    image: debezium/connect:1.4
    platform: linux/x86_64                                
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: my_status_topic
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
    depends_on: [kafka]
    ports:
      - 8083:8083

  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    platform: linux/x86_64                            
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8085,http://localhost:8085
    ports:
      - 8085:8085
    depends_on: [zookeeper, kafka]
 
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    depends_on:
      - postgres_master

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@host.docker.internal:5432/postgres?sslmode=disable"
    links:
      - prometheus  
  
  nginx-forwarder:
    build: ./nginx-forwarder
    image: nginx-forwarder
    platform: linux/x86_64                              

  app-in-compose:
    image: shrektan/r-production
    ports:
      - 3838:3838
    platform: linux/x86_64                        
    volumes:
      - "./apps:/app"
    command: ['Rscript', '-e', "shiny::runApp('/app', host = '0.0.0.0', port = 3838)"]

  shinyproxy:
    build: ./shinyproxy
    ports:
      - 8180:8180
    environment: 
      - "WORK_DIR=${PWD}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./shinyproxy-logs/server:/log"
      - "./shinyproxy-logs/container:/container-logs"
      - "./shinyproxy:/opt/shinyproxy" 
