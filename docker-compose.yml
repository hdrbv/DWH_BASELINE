version: "3.9"
services:
  postgres_master:
    container_name: postgres_master
    image: postgres:14.5
    restart: always
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./data-slave:/var/lib/postgresql/data-slave
      - ./createdb.sql:/docker-entrypoint-initdb.d/createdb.sql              
      - ./createview.sql:/docker-entrypoint-initdb.d/createview.sql      
      - ./init-script/config/postgres.conf:/etc/postgresql/postgresql.conf
      - ./init-script/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init-script:/etc/postgresql/init-script/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 50s  
  
  postgres_slave:
    container_name: postgres_slave
    image: postgres:14.5
    volumes:
      - ./data-slave:/var/lib/postgresql/data 
      - ./init-script/config/postgres.conf:/etc/postgresql/postgresql.conf
      - ./init-script/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  postgres_dwh:
    container_name: postgres_dwh
    image: postgres:14.5
    restart: always
    volumes:
      - ./data_pgre_ddwh:/var/lib/postgresql/data_pgre_ddwh      
      - ./create_pgre_ddwh.sql:/docker-entrypoint-initdb.d/create_pgre_ddwh.sql              
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres    
  
  clickh_master:
    container_name: clickh_master
    image: altinity/clickhouse-server:21.12.3.32.altinitydev.arm
    restart: always
    volumes:
      - ./data_ddwh:/var/lib/clickhouse/data_ddwh
      - ./create_ddwh.sql:/docker-entrypoint-initdb.d/create_ddwh.sql              
    ports:
      - "8123:8123"
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    platform: linux/x86_64                    
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s

  broker:
    image: confluentinc/cp-kafka:7.3.1
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    platform: linux/x86_64                    
    ports:
      - '9092:9092'
      - '9101:9101'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
      
  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.1
    hostname: rest-proxy
    container_name: rest-proxy
    platform: linux/x86_64                        
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8082:8082'
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'

  debezium:
    image: debezium/connect:latest
    container_name: debezium
    hostname: debezium
    platform: linux/x86_64                        
    depends_on:
      broker:
        condition: service_healthy
    restart: always
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: debezium-ui
    hostname: debezium-ui
    platform: linux/x86_64                    
    depends_on:
      debezium:
        condition: service_healthy
    restart: always
    ports:
      - '8085:8085'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083

  dmp-service:
    image: python:3.8
    container_name: dmp-service
    platform: linux/x86_64                        
    volumes:
      - ./DMP_service.py:/app/DMP_service.py
    depends_on:
      broker:
        condition: service_healthy
    working_dir: /app
    command: sh -c "pip install kafka-python psycopg2 && python -u DMP_service.py"
   
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    depends_on:
      - postgres_master

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@host.docker.internal:5432/postgres?sslmode=disable"
    links:
      - prometheus  
  
  nginx-forwarder:
    build: ./nginx-forwarder
    image: nginx-forwarder
    platform: linux/x86_64                              

  app-in-compose:
    image: shrektan/r-production
    ports:
      - 3838:3838
    platform: linux/x86_64                        
    volumes:
      - "./apps:/app"
    command: ['Rscript', '-e', "shiny::runApp('/app', host = '0.0.0.0', port = 3838)"]

  shinyproxy:
    build: ./shinyproxy
    ports:
      - 8080:8080
    environment: 
      - "WORK_DIR=${PWD}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./shinyproxy-logs/server:/log"
      - "./shinyproxy-logs/container:/container-logs"
      - "./shinyproxy:/opt/shinyproxy"
  
